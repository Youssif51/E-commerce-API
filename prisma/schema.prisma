// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
  SUPERADMIN
}

model User {
  id           Int      @id @default(autoincrement())
  username     String   @unique
  email        String   @unique
  passwordHash String
  firstName    String?
  lastName     String?
  address      String?
  phoneNumber  String?
  isAdmin      UserRole @default(USER)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  orders        Order[]
  shoppingCarts Cart[]
}

model Product {
  id              Int      @id @default(autoincrement())
  name            String   @unique
  description     String?
  price           Float
  quantityInStock Int
  imageUrl        String?
  threshold       Int      @default(10)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  categoryId Int

  subcategory   Subcategory @relation(fields: [subcategoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  subcategoryId Int

  CartItem  CartItem[]
  OrderItem OrderItem[]
}

model Category {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  products      Product[]
  subcategories Subcategory[]
}

model Subcategory {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  categoryId  Int
  category    Category @relation(fields: [categoryId], references: [id])
  whoCreated  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Product Product[]
}

model Cart {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int      @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  items CartItem[]
}

model CartItem {
  id        Int      @id @default(autoincrement())
  cart      Cart     @relation(fields: [cartId], references: [id])
  cartId    Int
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([cartId, productId])
}

model Order {
  id            Int      @id @default(autoincrement())
  user          User     @relation(fields: [userId], references: [id])
  userId        Int
  totalAmount   Float
  status        String
  paymentStatus String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  items    OrderItem[]
  Payments Payment[]
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   Int
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Payment {
  id            Int      @id @default(autoincrement())
  orderId       Int
  order         Order    @relation(fields: [orderId], references: [id])
  paymentMethod String
  amount        Float
  status        String
  transactionId String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}
